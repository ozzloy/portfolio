* add css inline
how do i add css inline for html?
#+begin_src html
  <!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Contact Information</title>
  </head>
  <body>
    <main>
        <section>
            <h2>Professional</h2>
            <article>
                <h3>LinkedIn</h3>
                <p><a href="https://linkedin.com/in/ozzloy">linkedin.com/in/ozzloy</a></p>
            </article>
            <article>
                <h3>Email</h3>
                <p><a href="mailto:ozzloy@each.do">ozzloy@each.do</a></p>
            </article>
            <article>
              <h3><a href="https://discord.com/">Discord</a></h3>
                <p>ozzloy_01423</p>
            </article>
        </section>
    </main>
  </body>
  </html>
#+end_src

i want green text on black background.

also style links to be green on black background, but make them look
cool.



To add inline CSS for green text on a black background, you can add a
=<style>= block in the =<head>= section. Here's how to modify your
HTML:

#+begin_src html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Information</title>
    <style>
        body {
            background-color: black;
            color: #00ff00; /* bright green text */
            font-family: 'Courier New', monospace;
        }

        a {
            color: #00ff00;
            text-decoration: none;
            border-bottom: 1px solid #00aa00;
            transition: all 0.3s ease;
            padding: 2px 4px;
        }

        a:hover {
            background-color: #003300;
            border-bottom: 1px solid #00ff00;
            box-shadow: 0 0 10px #00ff00;
        }
    </style>
</head>
<body>
  <main>
      <section>
          <h2>Professional</h2>
          <article>
              <h3>LinkedIn</h3>
              <p><a href="https://linkedin.com/in/ozzloy">linkedin.com/in/ozzloy</a></p>
          </article>
          <article>
              <h3>Email</h3>
              <p><a href="mailto:ozzloy@each.do">ozzloy@each.do</a></p>
          </article>
          <article>
            <h3><a href="https://discord.com/">Discord</a></h3>
              <p>ozzloy_01423</p>
          </article>
      </section>
  </main>
</body>
</html>
#+end_src

This creates a "hacker" style with green text on black background, and
links that glow and get a subtle background when you hover over them.
* DONE troubleshoot apache
CLOSED: [2025-04-04 Fri]

i'm getting the default apache page for =calendar.each.do=

here's my apache config for that

#+begin_src conf
  <VirtualHost *:80>
    ServerName calendar.each.do
    ProxyPreserveHost On
    ProxyRequests Off

    RewriteEngine on
    RewriteCond %{SERVER_NAME} =calendar.each.do
    RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
  </VirtualHost>

  <VirtualHost *:443>
      ServerName calendar.each.do

      # SSL Configuration
      SSLEngine on
      SSLCertificateFile /etc/letsencrypt/live/each.do-0001/fullchain.pem
      SSLCertificateKeyFile /etc/letsencrypt/live/each.do-0001/privkey.pem

      # Redirect
      <Directory "/var/www/calendar.each.do/">
        Options FollowSymLinks MultiViews
        AllowOverride None
        require all granted
      </Directory>

      # Logging
      ErrorLog ${APACHE_LOG_DIR}/calendar.each.do_error.log
      CustomLog ${APACHE_LOG_DIR}/calendar.each.do_access.log combined
  </VirtualHost>
#+end_src

what's happening?


Your Apache configuration is redirecting HTTP to HTTPS correctly, but
your HTTPS VirtualHost doesn't have any actual content delivery
configured. You're getting the default Apache page because:

1. You've set up a Directory directive, but you're not using it to
   serve content (no DocumentRoot directive)
2. There's no ProxyPass configuration to forward requests to a backend
   service

You need to either:

1. Add a DocumentRoot directive that points to where your calendar
   application files are located:
   #+begin_src conf
   DocumentRoot /var/www/calendar.each.do/
   #+end_src

2. Or if you're proxying to another service (like a calendar app
   running on another port), add:
   #+begin_src conf
   ProxyPass / http://localhost:your_app_port/
   ProxyPassReverse / http://localhost:your_app_port/
   #+end_src

Check your Apache error logs for more specific information about
what's happening.

* DONE make contacts page
CLOSED: [2025-04-04 Fri]

  + linkedin
  + matrix.org
  + irc libera channels
  + youtube channel
  + discord
  + email
  + website
  + github repos
  + calendar website

* DONE make calendar.each.do
CLOSED: [2025-04-04 Fri]

  + initially just redirect to youcanbook.me

* TODO add buttons for light/dark theme
[2025-02-12 Wed 21:05 -0800]
* TODO add choices for accent color
[2025-02-12 Wed 21:05 -0800]
* TODO add link to calendar
[2025-02-12 Wed 21:05 -0800]
https://ozzloy.youcanbook.me/

* portfolio site checklist
** DONE include a professional photo
CLOSED: [2025-02-07 Fri]
** DONE include "About Me" Paragraph or professional bio
CLOSED: [2025-02-03 Mon]
** DONE include section for future projects
CLOSED: [2025-02-04 Tue]
** DONE include list all known technologies / skills
CLOSED: [2025-02-06 Thu]
** DONE add github and linkedin links
CLOSED: [2025-02-04 Tue]
** TODO include section for hobbies, writings, cool stuff about you!
** DONE add contact information
CLOSED: [2025-02-12 Wed]
** DONE project links
CLOSED: [2025-02-12 Wed]
*** DONE include live links, code links
CLOSED: [2025-02-12 Wed]
** DONE include pdf resume link
CLOSED: [2025-02-12 Wed]
** TODO include project walk-through videos (bonus)
** TODO include testimonials (bonus)

* minimal complete example of hello world clojure app
show a minimal complete example of a hello world clojure app that uses
deps.edn

Here's a minimal Clojure hello world app with deps.edn:

#+begin_src clojure :file deps.edn
  {:paths ["src"]
   :deps {org.clojure/clojure {:mvn/version "1.11.1"}}}
#+end_src

#+begin_src clojure :file src/hello/core.clj
  (ns hello.core)

  (defn -main []
    (println "Hello, World!"))
#+end_src

Run it with:
#+begin_src bash
  clj -M -m hello.core
#+end_src

* common uses of deps.edn
what are some common things to do with deps.edn?

Common uses for deps.edn include:

1. Declaring project dependencies
#+begin_src clojure
  {:deps {org.clojure/clojure {:mvn/version "1.11.1"}
          compojure/compojure {:mvn/version "1.6.3"}}}
#+end_src

2. Setting up aliases for different profiles
#+begin_src clojure
  {:aliases
   {:dev {:extra-deps {...}}
    :test {:extra-paths ["test"]}
    :build {:deps {...}}}}
#+end_src

3. Adding extra source paths
#+begin_src clojure
  {:paths ["src" "resources"]}
#+end_src

4. Defining JVM options
#+begin_src clojure
{:jvm-opts ["-Xms512m" "-Xmx1024m"]}
#+end_src

* figwheel-main minimal complete

show a minimal complete figwheel main example.

Here's a minimal Figwheel-main example:

#+begin_src clojure
  ; deps.edn
  {:deps {org.clojure/clojure {:mvn/version "1.11.1"}
          org.clojure/clojurescript {:mvn/version "1.11.60"}
          com.bhauman/figwheel-main {:mvn/version "0.2.18"}}
   :paths ["src" "resources" "target"]
   :aliases {:fig {:main-opts ["-m" "figwheel.main" "-b" "dev" "-r"]}}}

  ; dev.cljs.edn
  ^{:watch-dirs ["src"]
    :css-dirs ["resources/public/css"]}
  {:main hello.core}

  ; src/hello/core.cljs
  (ns hello.core)

  (defn init []
    (js/console.log "Hello, Figwheel!"))

  (init)

  ; resources/public/index.html
  <!DOCTYPE html>
  <html>
    <head></head>
    <body>
      <div id="app"></div>
      <script src="cljs-out/dev-main.js"></script>
    </body>
  </html>
#+end_src

Run with:
#+begin_src bash
  clj -M:fig
#+end_src

Visit: http://localhost:9500

* align forms dir local

** first try
what are some options i can put in my .dir-locals for clojure and
clojurescript?  include things for aligning forms.  i'm also interested
in cider options and test running options.

Here's a sample .dir-locals.el for Clojure/ClojureScript projects:

#+begin_src elisp
((clojure-mode . ((clojure-align-forms-automatically . t)
                  (clojure-indent-style . :align-arguments)
                  (cider-clojure-cli-aliases . "dev:test")
                  (cider-preferred-build-tool . clojure-cli)
                  (cider-test-runner . "kaocha")
                  (eval . (put-clojure-indent 'match 1))
                  (eval . (put-clojure-indent 'reg-event-fx 0))))

 (clojurescript-mode . ((cider-default-cljs-repl . shadow)
                       (cider-shadow-default-options . "app"))))
#+end_src

These are common options, but you can customize based on your needs.
The alignment and indentation options are particularly useful for
consistent formatting.
** second try, add figwheel main

what are some options i can put in my .dir-locals for clojure and
clojurescript?  include things for aligning forms.  i'm also interested
in cider options, test running options, and figwheel main options.

Here's a sample .dir-locals.el for Clojure/ClojureScript projects:

#+begin_src elisp
  ((clojure-mode . ((clojure-align-forms-automatically . t)
                    (clojure-indent-style . :always-align)
                    (fill-column . 80)))

   (clojurescript-mode . ((clojure-align-forms-automatically . t)
                         (cider-default-cljs-repl . figwheel-main)
                         (cider-figwheel-main-default-options . ":dev")))

   (cider-repl-mode . ((cider-preferred-build-tool . clojure-cli)
                      (cider-test-show-report-on-success . t)
                      (cider-repl-display-help-banner . nil)
                      (cider-repl-history-size . 1000)))

   (clojure-test-mode . ((cider-test-show-report-on-success . t)
                        (cider-auto-test-mode . t))))
#+end_src

These are common options, but there are many more available depending
on your needs.

* drilling down on deps.edn configuration

here's the files in my bare minimum clojurescript project.
#+begin_src clojure
  ; deps.edn
  {:paths ["src" "resources" "target"]
  :deps {org.clojure/clojure       {:mvn/version "1.12.0"}
         org.clojure/clojurescript {:mvn/version "1.11.132"}
         com.bhauman/figwheel-main {:mvn/version "0.2.20"}}
  :aliases {:fig {:main-opts ["-m" "figwheel.main" "-b" "dev" "-r"]}}}

  ; dev.cljs.edn
  ^{:watch-dirs ["src"]
    :css-dirs ["resources/public/css"]}
  {:main to.tuo.portfolio}

  ; src/to/tuo/portfolio.cljs
  (ns to.tuo.portfolio)

  (defn init []
    (js/console.log "hello, figwheel"))

  (init)
#+end_src

#+begin_src elisp
  ; .dir-locals.el
  ((clojure-mode . ((clojure-align-forms-automatically . t)
                    (clojure-indent-style . :always-align)
                    (fill-column . 70)))

   (clojurescript-mode . ((clojure-align-forms-automatically . t)
                          (fill-column . 70)
                          (cider-default-cljs-repl . figwheel-main)
                          (cider-figwheel-main-default-options . ":dev")))

   (cider-repl-mode . ((cider-preferred-build-tool . clojure-cli)
                       (cider-test-show-report-on-success . t)
                       (cider-repl-display-help-banner . nil)
                       (cider-repl-history-size . 1000)))

   (clojure-test-mode . ((cider-test-show-report-on-success . t)
                         (cider-auto-test-mode . t))))
#+end_src

#+begin_src html
  ; resources/public/index.html
  <!DOCTYPE html>
  <html>
    <head>
      <meta charset="UTF-8" />
      <style>
        body {
          color: white;
          background-color: black;
        }
      </style>
      <title>figwheel main example</title>
    </head>
    <body>
      <script src="/cljs-out/dev-main.js"></script>
    </body>
  </html>
#+end_src

please explain the command line options for the alias fig. could i
change it if i'm going to use cider in spacemacs to run figwheel and
connect a repl to the code in the file =src/to/tuo/portfolio.cljs= and
to a browser window for evaluation? how do i change =deps.edn= for
that? how do i then launch a cider session and connect it to the code
and the browser?  what do the options in =.dir-locals.el= do?  are there
more options i could add to automate starting the cider repl?


Let's break this down:

1. The =:fig= alias options:
   - =-m figwheel.main=: runs figwheel.main as the entry point
   - =-b dev=: uses the =dev.cljs.edn= build configuration
   - =-r=: auto-runs the build on startup

2. For CIDER/Spacemacs usage, you can remove the =:fig= alias as CIDER
   will handle the REPL startup. The deps.edn can remain as is, just
   with the dependencies.

3. To start a CIDER session in Spacemacs:
   - =SPC m s i= (cider-jack-in-cljs)
   - Select =figwheel-main= when prompted
   - Enter =:dev= when asked for options
   - Browser will open automatically

4. .dir-locals.el breakdown:
   - =cider-default-cljs-repl=: sets figwheel-main as default CLJS REPL
   - =cider-figwheel-main-default-options=: pre-sets =:dev= build option
   - Other options control formatting and REPL behavior

5. Additional .dir-locals.el options you could add:
#+begin_src elisp
((clojurescript-mode
  . ((cider-preferred-build-tool . clojure-cli)
     (cider-default-cljs-repl . figwheel-main)
     (cider-figwheel-main-default-options . ":dev")
     (cider-repl-init-code . ("(require 'to.tuo.portfolio)")))))
#+end_src

This will automate more of the startup sequence.

* clojurescript to add html
i have the following minimal clojurescript project

#+begin_src clojure :file deps.edn
  {:paths ["src" "resources" "target"]
   :deps {org.clojure/clojure       {:mvn/version "1.12.0"}
          org.clojure/clojurescript {:mvn/version "1.11.132"}
          com.bhauman/figwheel-main {:mvn/version "0.2.20"}}}
#+end_src

#+begin_src clojure :file dev.cljs.edn
  ^{:watch-dirs ["src"]
    :css-dirs ["resources/public/css"]}
  {:main to.tuo.portfolio}
#+end_src

#+begin_src html :file resources/public/index.html
  <!doctype html>
  <html>
    <head>
      <meta charset="UTF-8" />
      <style>
        body {
          color: white;
          background-color: black;
        }
      </style>
      <title>figwheel main example</title>
    </head>
    <body>
      <script src="/cljs-out/dev-main.js"></script>
    </body>
  </html>
#+end_src

#+begin_src clojure :file src/to/tuo/portfolio.cljs
  (ns to.tuo.portfolio)

  (defn init []
    (js/console.log "hello, figwheel"))

  (init)
#+end_src

how do i add content to the page using clojure code?


To add content to the page in ClojureScript, you'll need to use
JavaScript's DOM manipulation methods. Here's a simple example:

#+begin_src clojure
(ns to.tuo.portfolio)

(defn init []
  (let [app (.. js/document (createElement "div"))
        text (.. js/document (createTextNode "Hello from ClojureScript!"))]
    (.. app (appendChild text))
    (.. js/document.body (appendChild app))))

(init)
#+end_src

For more convenient DOM manipulation, consider using libraries like:
- =reagent= (React wrapper)
- =hiccup= (HTML generation)
- =dommy= (DOM manipulation)

The most popular approach is using Reagent. Here's how to add it:

1. Add to deps.edn:
#+begin_src clojure
{:deps {reagent/reagent {:mvn/version "1.2.0"}}}
#+end_src

2. Use it in your code:
#+begin_src clojure
(ns to.tuo.portfolio
  (:require [reagent.dom :as rdom]
            [reagent.core :as r]))

(defn app []
  [:div "Hello from Reagent!"])

(defn init []
  (rdom/render [app]
               (.. js/document (getElementById "app"))))

(init)
#+end_src

Remember to add a div with id="app" to your HTML file if using Reagent.

** hiccup minimal complete

show a minimal complete example of creating html with hiccup, starting
with the following project

#+begin_src clojure :file deps.edn
  {:paths ["src" "resources" "target"]
   :deps {org.clojure/clojure       {:mvn/version "1.12.0"}
          org.clojure/clojurescript {:mvn/version "1.11.132"}
          com.bhauman/figwheel-main {:mvn/version "0.2.20"}}}
#+end_src

#+begin_src clojure :file dev.cljs.edn
  ^{:watch-dirs ["src"]
    :css-dirs ["resources/public/css"]
    :open-url false}
  {:main to.tuo.portfolio}
#+end_src

#+begin_src html :file resources/public/index.html
  <!doctype html>
  <html>
    <head>
      <meta charset="UTF-8" />
      <style>
        body {
          color: white;
          background-color: black;
        }
      </style>
      <title>figwheel main example</title>
    </head>
    <body>
      <script src="/cljs-out/dev-main.js"></script>
    </body>
  </html>
#+end_src

#+begin_src clojure :file src/to/tuo/portfolio.cljs
  (ns to.tuo.portfolio)

  (defn init []
    (js/console.log "hello, figwheel"))

  (init)
#+end_src


Here's a minimal example using Hiccup. First, add Hiccup to your
deps.edn:

#+begin_src clojure
;; deps.edn
{:paths ["src" "resources" "target"]
 :deps {org.clojure/clojure       {:mvn/version "1.12.0"}
        org.clojure/clojurescript {:mvn/version "1.11.132"}
        com.bhauman/figwheel-main {:mvn/version "0.2.20"}
        hiccup/hiccup             {:mvn/version "1.0.5"}}}
#+end_src

Then modify your portfolio.cljs:

#+begin_src clojure
(ns to.tuo.portfolio
  (:require [hiccup.core :refer [html]]))

(def my-element
  [:div
   [:h1 "Hello Hiccup"]
   [:p "This is a paragraph"]])

(defn init []
  (set! (.-innerHTML (.-body js/document))
        (html my-element)))

(init)
#+end_src

This will render a div containing an h1 and p element when the page
loads. The html function converts the Hiccup data structure into HTML
string format.

*** troubleshooting hiccup2

in this clojurescript code, when the namespace declaration changes
from
#+begin_src clojurescript :file src/to/tuo/portfolio.cljs
  (ns to.tuo.portfolio)
#+end_src

to

#+begin_src clojurescript :file src/to/tuo/portfolio.cljs
  (ns to.tuo.portfolio
    (:require [hiccup2.core :as h]))
#+end_src

the code stops loading in the browser.  why?


This likely occurs because the =hiccup2.core= namespace is meant for
server-side Clojure, not ClojureScript. Hiccup2 is not compatible with
ClojureScript. For client-side HTML generation in ClojureScript, you
should consider using alternatives like:

1. =hiccups= library
2. =reagent=
3. =rum=

** reagent minimal complete

show a minimal complete example of creating html with reagent, starting
with the following project

#+begin_src clojure :file deps.edn
  {:paths ["src" "resources" "target"]
   :deps {org.clojure/clojure       {:mvn/version "1.12.0"}
          org.clojure/clojurescript {:mvn/version "1.11.132"}
          com.bhauman/figwheel-main {:mvn/version "0.2.20"}}}
#+end_src

#+begin_src clojure :file dev.cljs.edn
  ^{:watch-dirs ["src"]
    :css-dirs ["resources/public/css"]
    :open-url false}
  {:main to.tuo.portfolio}
#+end_src

#+begin_src html :file resources/public/index.html
  <!doctype html>
  <html>
    <head>
      <meta charset="UTF-8" />
      <style>
        body {
          color: white;
          background-color: black;
        }
      </style>
      <title>figwheel main example</title>
    </head>
    <body>
      <script src="/cljs-out/dev-main.js"></script>
    </body>
  </html>
#+end_src

#+begin_src clojure :file src/to/tuo/portfolio.cljs
  (ns to.tuo.portfolio)

  (defn init []
    (js/console.log "hello, figwheel"))

  (init)
#+end_src


Here's a minimal Reagent example. First, add Reagent to your deps.edn:

#+begin_src clojure
;; deps.edn
{:deps {reagent/reagent {:mvn/version "1.2.0"}
        ;; ... other deps ...}}
#+end_src

Update your index.html to include a div for mounting:
#+begin_src html
<body>
  <div id="app"></div>
  <script src="/cljs-out/dev-main.js"></script>
</body>
#+end_src

Then modify your portfolio.cljs:
#+begin_src clojure
(ns to.tuo.portfolio
  (:require [reagent.dom :as rdom]
            [reagent.core :as r]))

(defn hello []
  [:div
   [:h1 "Hello from Reagent"]
   [:p "This is a component"]])

(defn ^:export init []
  (rdom/render [hello]
               (js/document.getElementById "app")))

(init)
#+end_src

Run with =clj -M:fig:build= and you should see the heading rendered in
white on black.

after doing that, the following error appears in the browser
#+begin_quote
Could not Find Namespace target/public/cljs-out/dev/reagent/impl/component.cljs
clojure.lang.ExceptionInfo: No such namespace: react, could not locate react.cljs, react.cljc, or JavaScript source providing "react" in file target/public/cljs-out/dev/reagent/impl/component.cljs

1  (ns reagent.impl.component
2    (:require [goog.object :as gobj]
3              [react :as react]
                ^---
                     No such namespace: react, could not locate react.cljs, react.cljc, or JavaScript source providing "react" in file
                                                                                target/public/cljs-out/dev/reagent/impl/component.cljs
4              [reagent.impl.util :as util]
5              [reagent.impl.batching :as batch]
6              [reagent.impl.protocols :as p]
7              [reagent.ratom :as ratom]
8              [reagent.debug :refer-macros [dev? warn warn-unless assert-callable]]))

Please see line 3 of file target/public/cljs-out/dev/reagent/impl/component.cljs
#+end_quote

Add the =react= and =react-dom= dependencies to your =deps.edn=:

#+begin_src clojure
{:paths ["src" "resources" "target"]
 :deps {org.clojure/clojure       {:mvn/version "1.12.0"}
       org.clojure/clojurescript {:mvn/version "1.11.132"}
       com.bhauman/figwheel-main {:mvn/version "0.2.20"}
       reagent/reagent           {:mvn/version "1.2.0"}
       cljsjs/react             {:mvn/version "17.0.2-0"}
       cljsjs/react-dom         {:mvn/version "17.0.2-0"}}}
#+end_src

This should resolve the missing React dependency error. Clean your target directory and restart figwheel.
* update repl after modifying deps.edn

how do i get the new library into the running cider repl after
updating deps.edn?


In CIDER, you can reload dependencies by using =cider-refresh= (bound
to =C-c C-x=) or by evaluating =(require
'[clojure.tools.deps.alpha.repl :refer [refresh]])= followed by
=(refresh)= in the REPL.

Alternatively, you can restart the REPL completely with
=cider-restart= (bound to =C-c C-q C-r=).

* auto align clojure code
the reagent line in this does not align with the prior lines:
#+begin_src clojure :file deps.edn
  {:paths ["src" "resources" "target"]
   :deps  {org.clojure/clojure       {:mvn/version "1.12.0"}
           org.clojure/clojurescript {:mvn/version "1.11.132"}
           com.bhauman/figwheel-main {:mvn/version "0.2.20"}
           reagent/reagent {:mvn/version "1.2.0"}}}
#+end_src

#+begin_src elisp :file .dir-locals.el
  ((clojure-mode
    . ((clojure-align-forms-automatically . t)
       (clojure-indent-style . :always-align))))
#+end_src

the map in =deps.edn= does not align when i hit TAB. the map does
align like this after manually invoking clojure-align:

#+begin_src clojure :file deps.edn
  {:paths ["src" "resources" "target"]
   :deps  {org.clojure/clojure       {:mvn/version "1.12.0"}
           org.clojure/clojurescript {:mvn/version "1.11.132"}
           com.bhauman/figwheel-main {:mvn/version "0.2.20"}
           reagent/reagent           {:mvn/version "1.2.0"}}}
#+end_src

why?  how do i get it to align automatically in spacemacs?

To get automatic alignment in Spacemacs with Clojure code, you need to:

1. Enable =clojure-mode= alignment in your =user-config=:
#+begin_src elisp
(use-package clojure-mode
  :config
  (setq clojure-indent-style 'align-arguments)
  (setq clojure-align-forms-automatically t))
#+end_src

Add this to your =dotspacemacs/user-config= in =.spacemacs=.

If that doesn't work, you can also try binding the align command to save:
#+begin_src elisp
(add-hook 'clojure-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'clojure-align nil 'local)))
#+end_src

The =.dir-locals.el= approach should work too, but sometimes Spacemacs
configuration takes precedence. Try the =user-config= approach first.

** make emacs align clojure forms on file save
make spacemacs align clojure forms on file save.

Add this to your init.el:

#+begin_src elisp
(add-hook 'before-save-hook
          (lambda ()
            (when (eq major-mode 'clojure-mode)
              (indent-region (point-min) (point-max)))))
#+end_src

This will auto-indent Clojure code when saving files in clojure-mode.

that did not work.  in fact, when the file looks like this
#+begin_src clojure
  {:paths ["src" "resources" "target"]
   :deps  {org.clojure/clojure       {:mvn/version "1.12.0"}
           org.clojure/clojurescript {:mvn/version "1.11.132"}
           com.bhauman/figwheel-main {:mvn/version "0.2.20"}
           reagent/reagent  {:mvn/version "1.2.0"}}}
#+end_src

the reagent line is not aligned with the rest of the map lines, even
after i highlight everything and manually invoke =indent-region=.

there's even configuration in dir-locals:
#+begin_src elisp :file .dir-locals.el
  ((clojure-mode
    . ((clojure-align-forms-automatically . t)
       (clojure-indent-style . :always-align))))
#+end_src


For Clojure map alignment, you might want to try =clojure-align=
instead. Add this to your init.el:

#+begin_src elisp
  (add-hook 'before-save-hook
            (lambda ()
              (when (eq major-mode 'clojure-mode)
                (clojure-align (point-min) (point-max)))))
#+end_src

Also, check that your .dir-locals.el file is properly closed with a
closing parenthesis:

#+begin_src elisp
  ((clojure-mode
    . ((clojure-align-forms-automatically . t)
       (clojure-indent-style . :always-align))))
#+end_src

If issues persist, you can manually align using =M-x clojure-align= on
the region.

* ReactDOM.render no longer supported
this clojurescript reagent code
#+begin_src clojure :file src/to/tuo/portfolio.cljs
  (ns to.tuo.portfolio
    (:require [reagent.dom :as rdom]))

  (defn hello []
    [:div
     [:h1 "hello from reagent"]
     [:p "this is a paragraph"]])

  (defn ^:export init []
    (js/console.log "hello, figwheel!")
    (rdom/render [hello] (js/document.getElementById "app")))

  (init)
#+end_src

gets the following error in the browser console
#+begin_quote
Warning: ReactDOM.render is no longer supported in React 18. Use
createRoot instead. Until you switch to the new API, your app will
behave as if it's running React 17. Learn more:
https://reactjs.org/link/switch-to-createroot <anonymous
code>:1:145535
#+end_quote

which shows this code snippet
#+begin_src js
  // Before
  import { render } from 'react-dom';
  const container = document.getElementById('app');
  render(<App tab="home" />, container);

  // After
  import { createRoot } from 'react-dom/client';
  const container = document.getElementById('app');
  const root = createRoot(container); // createRoot(container!) if you use TypeScript
  root.render(<App tab="home" />);
#+end_src

update the clojure code in the same way the javascript was updated.


Here's the updated ClojureScript code using =createRoot=:

#+begin_src clojure
  (ns to.tuo.portfolio
    (:require [reagent.dom.client :as rdom-client]))

  (defn hello []
    [:div
     [:h1 "hello from reagent"]
     [:p "this is a paragraph"]])

  (defn ^:export init []
    (js/console.log "hello, figwheel!")
    (let [root (rdom-client/create-root
                (js/document.getElementById "app"))]
      (.render root [hello])))

  (init)
#+end_src

The main changes are:
1. Require =reagent.dom.client= instead of =reagent.dom=
2. Use =create-root= to create a root instance
3. Call =.render= on the root instance


that code does not render anything in the browser and now i see this
#+begin_quote
Warning: Functions are not valid as a React child. This may happen if
you return a Component instead of <Component /> from render. Or maybe
you meant to call this function rather than return it. <anonymous
code>:1:145535
#+end_quote
* image tag in reagent
in clojurescript using reagent, make an image tag with src attribute
set to "example.jpg"

#+begin_src clojure
[:img {:src "example.jpg"}]
#+end_src

* where to put images in clojurescript reagent project?
where should i put a jpg file in a clojurescript reagent project?

In a ClojureScript Reagent project, image files like JPGs typically go
in the =public= or =resources/public= directory. They can then be
referenced in your code using relative paths starting from the public
directory.

* css make image have rounded corners and resize it
how do i make an html img tag have rounded corners and resize it to be
smaller with css?


Use CSS border-radius for rounded corners and width/height for
resizing:

#+begin_src css
img {
    border-radius: 10px;
    width: 300px;    /* or use percentage like 50% */
    height: auto;    /* maintains aspect ratio */
}
#+end_src

* can section tags be nested?
in html, can a section element be nested in another section element?


Yes, =<section>= elements can be nested within other =<section>=
elements. This is perfectly valid HTML and is commonly used to create
hierarchical content structure.

Example:
#+begin_src html
<section>
  <h2>Main Topic</h2>
  <section>
    <h3>Subtopic</h3>
    <!-- content -->
  </section>
</section>
#+end_src

* optional extension
make the file ending ".png" the default value, but also can be an
argument to the function
#+begin_src clojure
  (defn local-icon [language]
    (str "images/" language ".png"))
#+end_src

* make programming languages look nicer
with the following html
#+begin_src html
  <ul>
    <li>arm<img src="arm.svg" /></li>
    <li>bash<img src="bash.svg" /></li>
    <li>clojure<img src="clojure.svg" /></li>
  </ul>
#+end_src
and css like this
#+begin_src css
  #skills>ul {
    display: flex;
  }

  #skills>ul>li {
    display: inline-block;
  }

  #skills>ul>li>div {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
#+end_src

make the programming language appear centered over the programming
logo

Add a div wrapper around the text and image in each li, and put the
text first:

#+begin_src html
<ul>
  <li>
    <div>
      <span>arm</span>
      <img src="arm.svg" />
    </div>
  </li>
  <li>
    <div>
      <span>bash</span>
      <img src="bash.svg" />
    </div>
  </li>
  <li>
    <div>
      <span>clojure</span>
      <img src="clojure.svg" />
    </div>
  </li>
</ul>
#+end_src

The existing CSS will now center the text above each logo.

** make the list items wrap
the list of programming goes off the right edge of the window instead
of wrapping.  make it wrap.
#+begin_src html
  <ul>
    <li><span>arm<span><img src="arm.svg" /></li>
    <li><span>bash<span><img src="bash.svg" /></li>
    <li><span>clojure<span><img src="clojure.svg" /></li>
  </ul>
#+end_src
and css like this
#+begin_src css
  #skills>ul {
    display: flex;
  }

  #skills>ul>li {
    display: inline-block;
  }

  #skills>ul>li>div {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
#+end_src

Add =flex-wrap: wrap;= to the =#skills>ul= rule:

#+begin_src css
  #skills>ul {
      display: flex;
      flex-wrap: wrap;
  }
#+end_src

This will make the flex items wrap to the next line when they run out
of space.

* make them show better on dark background
some of these logos do not appear well on a dark background.  fix that.

#+begin_src html
  <ul>
    <li><div><span>arm</span><img src="arm.svg" /></div></li>
    <li><div><span>bash</span><img src="bash.svg" /></div></li>
    <li><div><span>clojure</span><img src="clojure.svg" /></div></li>
  </ul>
#+end_src

#+begin_src css
  #skills>ul { display: flex; }

  #skills>ul>li { display: inline-block; flex-wrap: wrap; }

  #skills>ul>li>div { display: flex; flex-direction: column;
    align-items: center; justify-content: center; }
#+end_src



For logos that don't show well on dark backgrounds, you can add a
light background or use CSS filters. Here's a fix:

#+begin_src css
#skills>ul>li img {
    background: white;
    border-radius: 50%;
    padding: 4px;
}
#+end_src

Also, in your HTML, you should close the =span= tags properly and use
=div= instead (since your CSS uses =div=):

#+begin_src html
<ul>
  <li><div>arm<img src="arm.svg" /></div></li>
  <li><div>bash<img src="bash.svg" /></div></li>
  <li><div>clojure<img src="clojure.svg" /></div></li>
</ul>
#+end_src
* not sure what command i just ran
i just ran some command in spacemacs with a keyboard shortcut.  now i
am unable to modify a src block in an org mode file.  when i try, i
see the message "user-error: Cannot modify an area being edited in a
dedicated buffer".  what did i do?  how do i find out what the command
was?  how do i make the src block editable again?

It sounds like you accidentally opened the source block in a dedicated
buffer (probably with =C-c '= or similar) but didn't close it
properly.

To find the command history:
- =C-h l= (view-lossage) shows recent commands

To fix this:
1. Look for any other buffers with the source code open
2. Close them with =C-c '= or =C-x k=
3. Try editing the source block again

If you can't find the buffer, you might need to restart Emacs as a
last resort.
* turn "-" into " "
turn all "-" into " " in a string in clojure


In Clojure, you can use =clojure.string/replace=:

#+begin_src clojure
(clojure.string/replace "hello-world-example" #"-" " ")
;; => "hello world example"
#+end_src

Or with require:
#+begin_src clojure
(require '[clojure.string :as str])
(str/replace "hello-world-example" #"-" " ")
#+end_src

* soften border
how do i make the border blend with the background 50% with css?
#+begin_src css
  @property --foreground-color {
    syntax: '<color>';
    initial-value: chartreuse;
    inherits: true;
  }
  @property --background-color {
    syntax: '<color>';
    initial-value: #111;
    inherits: true;
  }

  ,* {
    color: var(--foreground-color);
    background-color: var(--background-color);
    margin: 0;
    padding: 0;
  }
  #skills>ul>li {
    display: inline-block;
    margin: 1em;
    width: 140px;
    border: 1px solid;
    border-radius: 10px;
    padding: 1em;
  }
#+end_src

using the var "--foreground-color"?


Add =border-color= with =opacity= using =rgba()=. Here's how:

#+begin_src css
#skills>ul>li {
    /* ... other properties ... */
    border: 1px solid rgba(var(--foreground-color), 0.5);
}
#+end_src

Or using the modern way with =color-mix=:

#+begin_src css
    #skills>ul>li {
        /* ... other properties ... */
        border: 1px solid
                color-mix(in srgb,
                          var(--foreground-color) 50%,
                          transparent);
    }
#+end_src

* one css var based on other css var?
#+begin_src css
  @property --light-color {
    syntax: '<color>';
    initial-value: #eee;
    inherits: true;
  }
  @property --foreground-color {
    syntax: '<color>';
    initial-value: #eee;
    inherits: true;
  }
#+end_src
make it so =--foreground-color='s initial value is =--light-color=.

can this be done?


Yes, it can be done. You can reference custom properties as initial
values. Here's how:

#+begin_src css
  @property --foreground-color {
    syntax: '<color>';
    initial-value: var(--light-color);
    inherits: true;
  }
#+end_src

This will make =--foreground-color= initially take the value of
=--light-color=.

that did not work.  instead, color is set to white, and the inspector
says "--foreground-color" is not set.


You're right - I apologize for the incorrect information. According to
the CSS specification, =@property= rules cannot reference other custom
properties in their =initial-value=. The =initial-value= must be a
direct, valid value of the specified syntax type.

This is a limitation of the =@property= rule. You'll need to either:
1. Set both properties to the same literal value, or
2. Handle the relationship between these properties in your regular
   CSS rules instead

i want to have a way of explicitly specifying "light" color for the
background of icons that need a light background.  i also want a
variable for "foreground-color" that can change to match the system
theme.  i want the foreground-color to initially start with the light
color, and then change based on the system theme.


Here's a solution using regular CSS custom properties (without
@property):

#+begin_src css
  :root {
    --light-color: #eee;
    --foreground-color: var(--light-color);
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --foreground-color: #333;
    }
  }
#+end_src

This sets up --light-color as a constant and --foreground-color
initially matches it, but will change to dark in dark mode. No need
for @property rules in this case.

* how to set color as early as possible, and have it overridden
i want to set the color for my page as soon as possible, so i have
inline css to set the color.
#+begin_src html
  <!doctype html>
  <html>
    <head>
      <meta charset="UTF-8" />
      <style>
        body {
          color: white;
          background-color: black;
        }
      </style>
      <link rel="stylesheet" type="text/css"  href="css/style.css">
      <title>figwheel main example</title>
    </head>
    <body>
      <div id="app"></div>
      <script src="/cljs-out/dev-main.js"></script>
    </body>
  </html>
#+end_src

i also want to later change the color when i load css, so i have this
rule
#+begin_src css
  @media (prefers-color-scheme: light) {
    :root {
      --foreground-color: var(--night-color);
      --backround-color: var(--light-color);
    }
  }
  ,* {
    color: var(--foreground-color);
    background-color: var(--background-color);
  }
#+end_src

the rule at the end for setting =color: var(--foreground-color);= and
=background-color: var(--background-color);= is being overridden by
the inline rule.  how do i both set a color as early as possible, and
later change it based on things like media query?

To achieve both immediate color setting and later flexibility, you can
use CSS custom properties (variables) in your inline style and
redefine them later. Here's how:

#+begin_src html
  <style>
    :root {
      --foreground-color: white;
      --background-color: black;
    }
    body {
      color: var(--foreground-color);
      background-color: var(--background-color);
    }
  </style>
#+end_src

Then in your CSS file, you can redefine the variables:

#+begin_src css
  @media (prefers-color-scheme: light) {
    :root {
      --foreground-color: var(--night-color);
      --background-color: var(--light-color);
    }
  }
#+end_src

This way you get immediate color application while maintaining the
ability to change them dynamically later.

* css color transition
when i change my system color preference, the page colors change,
but they change immediately instead of transitioning slowly.  why?
#+begin_src html
  <!doctype html>
  <html>

  <head>
      <meta charset="UTF-8" />
      <style>
          @property --foreground-color {
              syntax: '<color>';
              inherits: true;
          }

          @property --background-color {
              syntax: '<color>';
              inherits: true;
          }

          :root {
              --light-color: #eee;
              --night-color: #111;
              --foreground-color: var(--light-color);
              --background-color: var(--night-color);
              transition: --foreground-color 5s ease,
                  --background-color 5s ease;
          }

          body {
              color: var(--foreground-color);
              background-color: var(--background-color);
          }
      </style>
      <link rel="stylesheet" type="text/css" href="css/style.css">
      <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/devicon.min.css" />
      <title>daniel watson's portfolio</title>
  </head>

  <body>
      <div id="app"></div>
      <script src="/cljs-out/dev-main.js"></script>
  </body>

  </html>
#+end_src

#+begin_src css
  @media (prefers-color-scheme: light) {
    :root {
      --foreground-color: var(--night-color);
      --background-color: var(--light-color);
    }
  }

  :root {
  }

  ,* {
    color: var(--foreground-color);
    background-color: var(--background-color);
    margin: 0;
    padding: 0;
  }

  header {
    display: flex;
    justify-content: space-between;
    padding: 1em;
  }

  h1 {
    font-size: xx-large;
  }

  #skills>ul {
    display: flex;
    flex-wrap: wrap;
  }

  #skills>ul>li {
    display: inline-block;
    margin: 1em;
    width: 140px;
    border: 1px
            solid
            color-mix(in srgb,
                      var(--foreground-color) 20%,
                      transparent);
    border-radius: 10px;
    padding: 1em;
  }

  #skills>ul>li>div>span {
    padding: 0.5em;
  }

  #skills>ul>li>div>img {
    border-radius: 10%;
    padding: 4px;
  }

  #skills>ul>li>div>img.night {
    background-color: var(--night-color);
  }

  #skills>ul>li>div>img.light {
    background-color: var(--light-color);
  }

  #skills>ul>li>div {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
#+end_src

i want to make it so changes to the vars =--foreground-color= and
=--background-color= are done with a smooth transition.

The issue is that the CSS custom property transitions aren't working
because you need to add =initial-value= to your =@property=
declarations. Here's the fix:

#+begin_src css
@property --foreground-color {
    syntax: '<color>';
    inherits: true;
    initial-value: #eee; /* Add this */
}

@property --background-color {
    syntax: '<color>';
    inherits: true;
    initial-value: #111; /* Add this */
}
#+end_src

Without initial values, the browser doesn't know how to interpolate
between the colors during the transition. Adding these values enables
the smooth transition effect you're looking for.

* set transition in property
is there a way to set the transition rule inside the property ruleset
for =--foreground-color= equivalent to this?
#+begin_src css
  @property --foreground-color {
      syntax: '<color>';
      inherits: true;
      initial-value: #eee;
      /* put transition rules here */
  }

  @property --background-color {
      syntax: '<color>';
      inherits: true;
      initial-value: #111;
      /* put transition rules here */
  }

  :root {
      --light-color: #eee;
      --night-color: #111;
      /* move this from :root into @property rules above */
      transition: --foreground-color 1s ease,
          --background-color 1s ease;
  }
#+end_src



No, transitions cannot be defined within =@property=
rules. Transitions must be defined in regular CSS rulesets (like
=:root= or other selectors) using the =transition= property as you've
shown. The =@property= syntax only allows for defining the property's
characteristics like syntax, inheritance, and initial value.

* get accent color through css
how do i get the accent color of the system through css?


In CSS, you can use the =accent-color= system color keyword like this:

#+begin_src css
  element {
    color: AccentColor;
    /* or */
    background-color: AccentColor;
  }
#+end_src

This works in modern browsers but support may vary. For broader
compatibility, you might need to use platform-specific solutions or
JavaScript APIs.

* set css variable if AccentColor exists
set the css variable =--accent-color= to the value in =AccentColor= if
it is available.  otherwise, leave it.
#+begin_src css
  @property --accent-color {
    syntax: '<color>';
    inherits: true;
    initial-value: chartreuse;
  }
#+end_src


Here's a CSS solution to set =--accent-color= conditionally based on
=AccentColor=:

#+begin_src css
:root {
  --accent-color: var(--accent-color, AccentColor, initial);
}
#+end_src

This will use =AccentColor= if available, otherwise keep the initial
value (chartreuse).

* update accent color
#+begin_src css
  @media (prefers-color-scheme: light) {
    :root {
      --foreground-color: var(--night-color);
      --background-color: var(--light-color);
    }
  }
#+end_src

this updates the foreground and background color when the color scheme
switches between light and dark.  how do i update the =--accent-color=
css var when the accent color changes?  is there a media query for
accent color?

There isn't a direct media query for system accent colors. However,
you can use the relatively new CSS property =accent-color= with the
keyword =system-accent-color= to automatically match the system's
accent color:

#+begin_src css
:root {
  --accent-color: AccentColor; /* or system-accent-color */
}
#+end_src

Note that browser support for this is still limited and it's
relatively new. For broader compatibility, you might need to use
JavaScript to detect system accent color changes and update your CSS
variables accordingly.

* update css var when accentcolor changes
update the css var =--accent-color= when AccentColor changes using
pure css.


Use the =@media= query with =(prefers-color-scheme)= to detect system
accent color changes:

#+begin_src css
  @media (prefers-color-scheme: light) {
    :root {
      --accent-color: AccentColor;
    }
  }
#+end_src

This will automatically update when the system accent color
changes. Note that =AccentColor= support varies by browser.

is there a way in pure css to detect whether accentcolor is supported
in the current browser?

Yes, you can use the =@supports= feature query:

#+begin_src css
@supports (color: AccentColor) {
  :root {
    --accent-color: AccentColor;
  }
}

@supports not (color: AccentColor) {
  :root {
    --accent-color: #0066cc; /* fallback color */
  }
}
#+end_src

* make links look better with css
make links look better with css.  look good with light or dark theme.


Here's a simple CSS snippet for attractive links that work well in
both light and dark themes:

#+begin_src css
a {
  color: #0366d6;
  text-decoration: none;
  border-bottom: 1px solid transparent;
  transition: border-color 0.2s ease;
}

a:hover {
  border-bottom-color: currentColor;
}

@media (prefers-color-scheme: dark) {
  a {
    color: #58a6ff;
  }
}
#+end_src

This gives subtle underline-on-hover effect and appropriate colors for
both themes.

Here's a concise CSS snippet to enhance link styling:

#+begin_src css
  a {
    color: #0066cc;
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: border-color 0.2s;
  }

  a:hover {
    border-bottom-color: #0066cc;
  }
#+end_src

This creates clean links with a subtle underline animation on
hover. Adjust colors to match your design.

* configure webbeautify
in spacemacs, can i configure webbeautify to indent with 2 spaces?
and can i have it wrap code at 70 columns?


Yes, you can configure web-beautify in Spacemacs. Add this to your
=dotspacemacs/user-config=:

#+begin_src lisp
(setq web-beautify-args '("-s" "2" "-w" "70"))
#+end_src

This sets 2-space indentation (=-s 2=) and wraps at 70 columns (=-w
70=).

Yes, you can configure web-beautify in Spacemacs to use 2
spaces for indentation. Add this to your =dotspacemacs/user-config= in
your =.spacemacs= file:

#+begin_src lisp
(setq web-beautify-args '("-s" "2"))
#+end_src

This sets the indentation to 2 spaces for js-beautify, which
web-beautify uses under the hood.

* page layout
i have html structure like this:
#+begin_src html
  <main>
    <section id="about-me">about me</section>
    <section id="projects">projects</section>
    <section id="skills">skills</section>
    <section id="hobbies">hobbies</section>
    <section id="future-projects">future projects</section>
  </main>
#+end_src

write some css to make it look good.

Here's a clean, responsive CSS for your structure:

#+begin_src css
main {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
}

section {
  min-height: 100vh;
  padding: 4rem 2rem;
  margin: 2rem 0;
  border-radius: 8px;
  background-color: #f5f5f5;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

section:nth-child(even) {
  background-color: #ffffff;
}

@media (max-width: 768px) {
  section {
    padding: 2rem 1rem;
  }
}
#+end_src

This CSS provides:
- Centered content with max-width
- Full-height sections
- Alternating backgrounds
- Subtle shadows
- Mobile responsiveness
- Clean spacing

* deploy clojure reagent project
:PROPERTIES:
:GPTEL_TOPIC: deploy-clojure-reagent-project
:END:

i have the following reagent file

#+begin_src clojure :file src/to/tuo/portfolio.cljs
  (ns to.tuo.portfolio
    (:require
     ["react-dom/client" :refer [createRoot]]
     [reagent.core :as r]
     [clojure.string :as str]))

  (defn professional-photo []
    [:img#professional-photo
     {:src   "daniel-watson.jpeg"
      :style {:border-radius "10px"
              :width         "300px"
              :height        "auto"}}])

  (defn about-me []
    [:section#about-me
     [:h2 "about me"]
     [:p "Computers carry math into physical reality.  That is really
      neat.  Math offers a clarity of thinking that I find soothing and
      enjoyable.  When implementing an algorithm, the computer makes it
      clear if some step is not specified completely enough, or is
      altogether incorrect."]
     [:p "When doing math, I discover things that are true about the
      world around me that have been true and will continue to be true
      forever.  Consequences of certain ideas followed out to their
      conclusions always comport with prior facts about the world.
      Seemingly unrelated ideas can have underlying connections that I
      find satisfying to discover."]
     [:p "Collaboration with other people motivates me as well.  We can
      make a lot more progress relying on each other than working alone.
      I have been working with computers for decades.  When I hit a key
      on my keyboard, corresponding text shows up on the screen.  I know
      a lot of the steps involved in making that happen, more than even
      most programmers.  There are also datastuctures at play that I do
      not know.  These abstractions make it much easier for me to do the
      same thing with a wide variety of keyboards.  I contribute to this
      pretty directly.  With circuitpython, and kmkfw, I recently
      identified an assumption on the availability of USB HID.  The
      adafruit devs made an update to circuit python, and I made an
      update to kmkfw to allow a chip with bluetooth to act as a
      keyboard.  As a result, I can now use my seeed xiao esp32 c6 as a
      controller for my keyboard, a capability that was absent when I
      bought the board."]])

  (defn projects []
    [:section#projects
     [:h2 "projects"]
     [:p "all of these projects are self hosted on a debian vm running
      apache as a reverse proxy front to various each project's front
      and back, such as Flask in Python, httpkit in Clojure, and Express
      in Javascript."]
     [:section
      [:h3 "tax"]
      [:ul
       [:li [:a {:href "https://tax.each.do/"} "live"]]
       [:li [:a {:href "https://github.com/ozzloy/tax-back"}
             "backend code"]]
       [:li [:a {:href "https://github.com/ozzloy/tax-front"}
             "frontend code"]]]
      [:p "In this project, me and my pair programming partner created a
       rental site, much like AirBnB.  For the backend, we used
       sequelize which handles JSON requests and serves JSON.  The
       frontend uses React Vite.  For client side state management,
       Redux greatly simplified and centralized code, especially code
       for making requests to the backend and dealing with responses."]
      [:a {:href "https://tax.each.do/"}
       [:img {:src "images/projects/tax.png"
              :style {:border "2px solid var(--accent-color)"
                      :border-radius "10px"
                      :width "500px"}}]]]
     [:section
      [:h3 "i'll brb"]
      [:ul
       [:li [:a {:href "https://ill-brb.each.do/"} "live"]]
       [:li [:a {:href "https://github.com/ozzloy/solo-ill-brb"} "code"]]]
      [:p "In this project, me and my pair programming partner created a
       rental site, much like AirBnB.  For the backend, we used
       sequelize which handles JSON requests and serves JSON.  The
       frontend uses React Vite.  For client side state management,
       Redux greatly simplified and centralized code, especially code
       for making requests to the backend and dealing with responses."]
      [:a {:href "https://ill-brb.each.do"}
       [:img {:src "images/projects/ill-brb.png"
              :style {:border "2px solid var(--accent-color)"
                      :border-radius "10px"
                      :width "500px"}}]]]
     [:section
      [:h3 "bingo"]
      [:ul
       [:li [:a {:href "https://bingo.each.do/"} "live"]]
       [:li [:a {:href "https://gitea.com/ozzloy/b1ng0"}
             "code"]]]
      [:p "During the covid lock downs, I made this site so I could
       continue playing bingo with my grampa over the internet through
       lockdowns.  It uses websockets in clojurescript to coordinate
       shared state for all connected players.  The frontend updates via
       Reagent, the clojurescript bridge to React."]
      [:a {:href "https://bingo.each.do/"}
       [:img {:src "images/projects/bingo.png"
              :style {:border "2px solid var(--accent-color)"
                      :border-radius "10px"
                      :width "500px"}}]]]
     [:section
      [:h3 "where da gas at?"]
      [:ul
       [:li [:a {:href "https://where-da-gas-at.each.do/"} "live"]]
       [:li [:a {:href "https://github.com/ozzloy/where-da-gas-at"}
             "code"]]]
      [:p "This app helps users track gas stations and prices.  I took
       leadership of a group of 4 to complete this project.  Team
       members looked to me for guidance about what to work on.  I
       assessed their skills and constraints to give tasks that made the
       most of them.  I also integrated all the work frequently by
       rebasing their work into a single line of history."]
      [:a {:href "https://where-da-gas-at.each.do/"}
       [:img {:src "images/projects/where-da-gas-at.png"
              :style {:border "2px solid var(--accent-color)"
                      :border-radius "10px"
                      :width "500px"}}]]]])

  (defn future-projects []
    [:section#future-projects
     [:h2 "future projects"]
     [:section
      [:h3 "fit"]
      [:h4 "workout timing and tracking."]
      [:p "the way i work out right now is to watch videos on youtube
       that have someone do the exercise and follow along with their
       exact timing.  it would be nice to have an app that can display a
       couple images of the exercise.  it should alsokeep time and beep
       to let me know when to switch sides, when to do a mini-rest, when
       to start and stop an exercise completely."]]
     [:section
      [:h3 "keyboard"]
      [:h4 "wireless split column splay bluetooth 32 key modified
      miryoku with home row mods"]
      [:p "i want to make a keyboard using my xiao ble board and kmk
       firmware.  my current keyboard is a wireless split column stagger
       keyboard.  it would be neat to make a wireless one with columns
       splayed out to match my natural finger travel more closely.  this
       would also be a good project for learning about battery power and
       usb c plugs and cables.  i have already hand soldered a full
       keyboard and written firmware for a few devices, so i think that
       part will be easy enough."]]])

  (def programming-language-badge-width "100px")
  (defn devicon [language wordmark?]
    (let [protocol "https"
          host     "cdn.jsdelivr.net"
          path     (str
                    "/gh/devicons/devicon@latest/icons/" language "/")
          filename (str language
                        "-original"
                        (if wordmark? "-wordmark" "")
                        ".svg")]
      (str protocol "://" host path filename)))

  (defn local-icon [language extension]
    (str "images/icons/" language "." extension))

  (defn- icon-item [language src background]
    [:li
     [:div
      [:span (str/replace language #"-" " ")]
      [:img
       {:src   src
        :class background
        :style {:width  programming-language-badge-width
                :height "auto"}}]]])

  (defn item-local-icon
    ([language] (item-local-icon language "png"))
    ([language extension]
     (item-local-icon language extension "none"))
    ([language extension background]
     [icon-item
      language (local-icon language extension) background]))

  (defn item-devicon
    ([language] (item-devicon language "none"))
    ([language background]
     (item-devicon language background false))
    ([language background wordmark?]
     [icon-item language (devicon language wordmark?) background]))

  (defn skills []
    [:section#skills
     [:h2 "skills"]
     [:section
      [:h3 "programming languages"]
      [:p "these are all languages that i've helped other people with, or
      i have written a lot of for myself.  after working with this many
      languages, picking up a new one is relatively easy."]
      [:ul
       [item-local-icon "arm" "svg" "light"]
       [item-devicon "arduino"]
       [item-devicon "awk" "light" "wordmark"]
       [item-devicon "bash" "light"]
       [item-devicon "c"]
       [item-devicon "cplusplus"]
       [item-devicon "clojure"]
       [item-devicon "clojurescript"]
       [item-local-icon "common-lisp"]
       [item-devicon "elm"]
       [item-devicon "emacs" "light"]
       [item-local-icon "guile" "svg" "light"]
       [item-devicon "haskell"]
       [item-devicon "java"]
       [item-devicon "javascript"]
       [item-local-icon "ladder-diagram"]
       [item-devicon "matlab"]
       [item-local-icon "MIPS" "svg" "light"]
       [item-devicon "ocaml"]
       [item-local-icon "octave"]
       [item-local-icon "openscad"]
       [item-devicon "prolog"]
       [item-devicon "python"]
       [item-local-icon "racket" "svg"]
       [item-devicon "ruby"]
       [item-local-icon "scratch" "svg"]
       [item-local-icon "Snap!" "svg"]
       [item-local-icon "x86" "svg"]]]

     [:section
      [:h3 "frameworks and libraries and tools"]
      [:ul
       [item-devicon "apache"]
       [item-devicon "bitbucket"]
       [item-devicon "css3"]
       [item-devicon "debian"]
       [item-devicon "express" "light"]
       [item-devicon "flask" "light"]
       [item-devicon "gcc"]
       [item-devicon "git"]
       [item-devicon "gitlab"]
       [item-devicon "html5"]
       [item-devicon "latex" "light"]
       [item-devicon "linux" "light"]
       [item-devicon "mocha"]
       [item-devicon "mysql"]
       [item-devicon "nodejs"]
       [item-devicon "npm" "none" true]
       [item-devicon "postgresql"]
       [item-devicon "pypi"]
       [item-devicon "pytest"]
       [item-devicon "raspberrypi"]
       [item-devicon "react"]
       [item-local-icon "reagent" "svg"]
       [item-devicon "sqlite" "light"]
       [item-devicon "sequelize"]
       [item-devicon "sqlalchemy" "light"]
       [item-devicon "ssh" "light"]
       [item-devicon "ubuntu"]
       [item-devicon "vitejs"]]]])

  (defn social []
    [:section#social
     [:h2 "socials"]
     [:ul
      [:li [:a {:href "https://linkedin.com/in/ozzloy"} "linkedin"]]
      [:li [:a {:href "https://github.com/ozzloy"} "github"]]]])

  (defn hobbies []
    [:section#hobbies
     [:h2 "hobbies"]
     [:section
      [:h3 "climbing"]
      [:p "my mom and dad tell me that if they could not find me when i
       was a little kid, they would look up.  climbing has puzzle
       solving and physical strength wrapped together.  the same route
       looks different depending on who climbs it."]]
     [:section
      [:h3 "juggling"]
      [:p "i can juggle 5-ball.  i made a "
       [:a {:href (str "https://docs.google.com/document/d/"
                       "197iyXQcppY7B1_M6Gn-lUU21qyMRK8LqvhypGGvaiHk")}
        "tutorial on making chain mail juggling props"]
       "."]]])

  (defn contact []
    [:section#contact
     [:h2 "contact"]
     [:p
      [:a {:href "mailto:ozzloy@each.do"} "email"]]])

  (defn resume []
    [:section#resume
     [:h2 "resume"]
     [:a {:href "resume/Daniel Watson Web Resume.pdf"} "web dev"]])

  (defn content []
    [:<>
     [:header
      [professional-photo]
      [:div
       [:h1 "daniel watson"]
       [contact]
       [social]
       [resume]]]
     [:main
      [about-me]
      [projects]
      [skills]
      [hobbies]
      [future-projects]]])

  (defonce root (createRoot (js/document.getElementById "app")))

  (defn ^:export init []
    (.render root (r/as-element [content])))

  (init)
#+end_src

and the following =deps.edn=
#+begin_src clojure :file deps.edn
{:paths ["src" "resources" "target"]
 :deps  {org.clojure/clojure       {:mvn/version "1.12.0"}
         org.clojure/clojurescript {:mvn/version "1.11.132"}
         com.bhauman/figwheel-main {:mvn/version "0.2.20"}
         reagent/reagent           {:mvn/version "1.2.0"}
         cljsjs/react              {:mvn/version "18.3.1-1"}
         cljsjs/react-dom          {:mvn/version "18.3.1-1"}}}

#+end_src

how do i deploy this?  i already have apache.  can i compile a bunch
of static html and css and other assets and scp that up to my server
and then configure apache accordingly?

Yes, you can compile your Reagent project to static assets and serve
them via Apache. Here's how:

1. First, create a production build configuration (e.g.,
   =prod.cljs.edn=):
#+begin_src clojure
  {:main to.tuo.portfolio
   :optimizations :advanced
   :output-dir "resources/public/js/compiled"
   :output-to "resources/public/js/main.js"}
#+end_src

1. Compile the project:
#+begin_src bash
  clj -M -m figwheel.main -bo prod
#+end_src

1. Your compiled assets will be in =resources/public/=. Create an
   =index.html= there:
#+begin_src html
  <!DOCTYPE html>
  <html>
    <head>
      <title>Portfolio</title>
    </head>
    <body>
      <div id="app"></div>
      <script src="js/main.js"></script>
    </body>
  </html>
#+end_src

4. SCP everything from =resources/public/= to your server:
#+begin_src bash
  scp -r resources/public/* user@server:/var/www/yoursite/
#+end_src

5. Configure Apache virtual host:
#+begin_src apache
<VirtualHost *:80>
    ServerName yoursite.com
    DocumentRoot /var/www/yoursite
    <Directory /var/www/yoursite>
        Require all granted
    </Directory>
</VirtualHost>
#+end_src

Remember to include all your static assets (images, CSS) in
=resources/public/= before copying.

** static =index.html= already has a script tag with a source for dev
i already have this =index.html= with a script tag for dev.  i can
make this change, but it would be cool to have a better way to build
for dev and prod that didn't require me to change the static
index.html file
#+begin_src html :file resources/public/index.html
  <!doctype html>
  <html>

  <head>
    <meta charset="UTF-8" />
    <style>
      @property --foreground-color {
        syntax: '<color>';
        inherits: true;
        initial-value: #eee;
      }

      @property --background-color {
        syntax: '<color>';
        inherits: true;
        initial-value: #111;
      }

      @property --accent-color {
        syntax: '<color>';
        inherits: true;
        initial-value: chartreuse;
      }

      :root {
        --light-color: #eee;
        --night-color: #111;
        transition:
          --foreground-color 1s ease,
          --background-color 1s ease,
          --accent-color 1s ease;
        color: var(--foreground-color);
        background-color: var(--background-color);
      }
    </style>
    <link rel="stylesheet" type="text/css" href="css/style.css">
    <link rel="stylesheet" type="text/css"
      href="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/devicon.min.css" />
    <title>daniel watson's portfolio</title>
  </head>

  <body>
    <div id="app"></div>
    <script src="/cljs-out/dev-main.js"></script>
  </body>

  </html>
#+end_src


You can use a build-specific HTML template approach. Here's how:

1. Move your current =index.html= to =resources/public/index_dev.html=

2. Create =resources/public/index_prod.html= with the production
   script:
#+begin_src html
  <!-- Same as dev but change script to: -->
  <script src="js/main.js"></script>
#+end_src

3. Add to your build config to copy the right template:
#+begin_src clojure
  {:main to.tuo.portfolio
   :optimizations :advanced
   :output-dir "resources/public/js/compiled"
   :output-to "resources/public/js/main.js"
   :final-output-dir "resources/public"
   :pre-build-hooks [(fn [_]
                      (copy-file
                        "resources/public/index_prod.html"
                        "resources/public/index.html"))]}
#+end_src

This way you maintain separate templates for dev/prod but only deploy
the correct one.

* standard bundling of clojurescript figwheel project
what's the standard way to bundle a clojurescript figwheel project for
deployment of the static assets using deps.edn?


For ClojureScript projects using deps.edn and figwheel-main, the
standard approach is to use =cljs.build.api/build= with optimizations
set to =:advanced=. Add this alias to your deps.edn:

#+begin_src clojure
{:aliases
 {:prod {:main-opts ["-m" "cljs.main"
                     "--optimizations" "advanced"
                     "--compile" "your.core.namespace"]}}}
#+end_src

Then run: =clj -M:prod=

* cljfmt
how do i make cljfmt wrap code at 70 columns?

To make cljfmt wrap at 70 columns, add this to your =cljfmt=
configuration:

#+begin_src clojure
  {:max-line-length 70}
#+end_src

This can go in either =project.clj= or =.cljfmt.edn= in your project
root.

how do i run cljfmt in my project? i'm using =deps.edn=.  does that
matter?

For =deps.edn= projects, add cljfmt as an alias in your =deps.edn=:

#+begin_src clojure :file deps.edn
  {:aliases
   {:cljfmt
    {:extra-deps {cljfmt/cljfmt {:mvn/version "0.9.2"}}
     :main-opts ["-m" "cljfmt.main" "fix"]}}}
#+end_src

Then run it with:

#+begin_src bash
  clj -M:cljfmt
#+end_src

This will format all Clojure files in your project.

would the =:max-line-length= go in the =deps.edn=?  what would the
final result look like?


No, the =:max-line-length= goes in a separate =.cljfmt.edn= file in
your project root. You'll need both files:

=deps.edn=:
#+begin_src clojure
  {:aliases
   {:cljfmt
    {:extra-deps {cljfmt/cljfmt {:mvn/version "0.9.2"}}
     :main-opts ["-m" "cljfmt.main" "fix"]}}}
#+end_src

=.cljfmt.edn=:
#+begin_src clojure
  {:max-line-length 70}
#+end_src

* scp to remote
i created a user on the server like this:
#+begin_src bash
  sudo useradd \
       --system \
       --shell /bin/bash \
       --home-dir /var/www/portfolio.example.com \
       portfolio.example.com
  sudo mkdir -p /var/www/portfolio.example.com
  sudo chown -R \
       portfolio.example.com:portfolio.example.com \
       /var/www/portfolio.example.com
#+end_src

how do i make it so my local user can
#+begin_src bash
  scp resources/public/index-prod.html \
      portfolio.example.com@example.com:index.html
#+end_src

i need to create a =.ssh/authorized-keys2= or something, right?


Yes, you need to set up SSH keys. Here's what to do:

1. Create =.ssh= directory on server:
#+begin_src bash
  sudo mkdir -p /var/www/portfolio.example.com/.ssh
  sudo chown portfolio.example.com:portfolio.example.com \
       /var/www/portfolio.example.com/.ssh
  sudo chmod 700 /var/www/portfolio.example.com/.ssh
#+end_src

2. Copy your local public key to server:
#+begin_src bash
  cat ~/.ssh/id_rsa.pub \
      | ssh example.com \
            "sudo tee \
             /var/www/portfolio.example.com/.ssh/authorized_keys"
#+end_src

3. Set permissions:
#+begin_src bash
  sudo chown portfolio.example.com:portfolio.example.com \
       /var/www/portfolio.example.com/.ssh/authorized_keys
  sudo chmod 600 /var/www/portfolio.example.com/.ssh/authorized_keys
#+end_src

Now =scp= should work.

* apache config for serving static site
i have apache up and running.  i want to add a config for requests to
"portfolio.example.com" and serve the files in
=/var/www/portfolio.example.com= for those requests.

Create a new Virtual Host configuration file in
=/etc/apache2/sites-available/=:

#+begin_src apache
# portfolio.example.com.conf
<VirtualHost *:80>
    ServerName portfolio.example.com
    DocumentRoot /var/www/portfolio.example.com

    <Directory /var/www/portfolio.example.com>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>
#+end_src

Then:
1. =sudo a2ensite portfolio.example.com.conf=
2. =sudo systemctl reload apache2=

Don't forget to add the domain to your hosts file or DNS.

i've also set up ssl.  does this configuration look ok?
there are no symlinks to follow.
#+begin_src conf
  <VirtualHost *:80>
    ServerName portfolio.example.com
    ProxyPreserveHost On
    ProxyRequests Off

    RewriteEngine on
    RewriteCond %{SERVER_NAME} =portfolio.example.com
    RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
  </VirtualHost>

  <VirtualHost *:443>
    ServerName portfolio.example.com

    SSLEngine on
    SSLCertificateFile /path/to/your/fullchain.pem
    SSLCertificateKeyFile /path/to/your/privkey.pem

    DocumentRoot /var/www/portfolio.example.com
    <Directory /var/www/portfolio.example.com>
      Options Indexes
      AllowOverride All
      Require all granted
    </Directory>
  </VirtualHost>
#+end_src

please explain =AllowOverride=


Your configuration looks good. It redirects HTTP to HTTPS and serves
your portfolio over SSL.

=AllowOverride All= specifies which directives in =.htaccess= files
can override the main configuration. Options are:

- =All=: Allow all overrides
- =None=: Disable =.htaccess= completely
- Specific options like =FileInfo=, =AuthConfig=, =Indexes=

If you don't plan to use =.htaccess= files, you can safely set it to
=None=. This is actually better for performance since Apache won't
check for =.htaccess= files in each directory.

Also, since you don't need symlinks, you can remove =FollowSymLinks=
from the config.

what about the lines
#+begin_src conf
  ProxyPreserveHost On
  ProxyRequests Off
#+end_src
what do they do?


Those lines are actually unnecessary in your configuration since
you're not using Apache as a proxy server. They're typically used when
Apache acts as a reverse proxy to another server.

- =ProxyPreserveHost On=: Passes the original Host header to the
  backend server
- =ProxyRequests Off=: Disables forward proxy functionality (security
  measure)

Since you're directly serving static files from
=/var/www/portfolio.example.com=, you can safely remove these lines
from your config.
